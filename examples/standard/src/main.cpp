/*
 *  SPDX-License-Identifier: MIT
 *  Ejemplo ‚Äî AyresWiFiManager (ESP32/ESP8266)
 *  ---------------------------------------------------------------
 *  @file      main.cpp
 *  @brief     Ejemplo de uso ‚Äúlisto para flashear‚Äù del AyresWiFiManager.
 *
 *  Qu√© muestra este ejemplo
 *  ---------------------------------------------------------------
 *  ‚Ä¢ Configura SSID/Pass del AP del portal y hostname.
 *  ‚Ä¢ Activa timeout del portal (5 min) con pol√≠tica de ‚Äúno cerrar si hay STAs‚Äù
 *    y reinicio del timer ante cada request HTTP.
 *  ‚Ä¢ Intenta conectar con /wifi.json si existe; si no, abre portal seg√∫n
 *    la pol√≠tica elegida (NO_CREDENTIALS_ONLY por defecto).
 *  ‚Ä¢ Logea RSSI e ‚ÄúInternet OK/NO‚Äù (generate_204) cada 30 s cuando conecta.
 *  ‚Ä¢ Habilita reconexi√≥n autom√°tica y NTP al reconectar.
 *
 *  Tips:
 *  ‚Ä¢ setCaptivePortal(false) ‚Üí portal sin redirecciones; entr√°s manual a
 *    http://192.168.4.1.
 *  ‚Ä¢ setProtectedJsons({ "wifi.json", "licencia.json" }) protege esos JSON
 *    de la limpieza por bot√≥n ‚â•5 s.
 *
 *  Autor       : (Daniel Salgado) ‚Äî AyresNet
 *  Versi√≥n     : 2.0.0
 *  Licencia    : MIT
 */


#include <Arduino.h>
#include "AyresWiFiManager.h"
#include "AyresShell.h"

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Objetos ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
AyresWiFiManager wifiManager;   // LED=2, BTN=0 (por defecto)
AyresShell       shell;

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Estado/log peri√≥dico ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
static uint32_t lastNetCheck = 0;
static const uint32_t NET_CHECK_MS = 30000;  // 30 s

void setup() {
  Serial.begin(115200);
  delay(200);
  shell.begin();

  Serial.println();
  Serial.println("==== AyresWiFiManager (pro) ====");

  // === RUTA DE HTML DEL PORTAL ===
  // Por defecto busca en la RA√çZ del FS:  "/index.html"
  // Si us√°s carpeta: /wifimanager/  (index.html, success.html, error.html)
  // wifiManager.setHtmlPathPrefix("/wifimanager");
  // Si subiste en la ra√≠z, pod√©s dejar el default o forzar as√≠:
  // wifiManager.setHtmlPathPrefix("/");

  // === Hostname + SSID/Pass del AP del portal cautivo ===
  wifiManager.setHostname("ayreswifimanager");
  wifiManager.setAPCredentials("ayreswifimanager", "123456789");

  // === Comportamiento del portal cautivo ===
  //wifiManager.setCaptivePortal(false);   // redirect DNS a 192.168.4.1
  wifiManager.setPortalTimeout(300);    // cierra portal si 5 min sin uso
  wifiManager.setAPClientCheck(true);   // el timeout no corre si hay clientes
  wifiManager.setWebClientCheck(true);  // cada request reinicia timeout

  // Proteg√© exactamente esos archivos .json:
  //wifiManager.setProtectedJsons({"/licencia.json", "/secret.json", "wifi.json"});

  // ========= ELEG√ç UNA POL√çTICA DE FALLBACK =========
  // A) Abrir portal AUTOM√ÅTICAMENTE solo si NO hay credenciales (provisi√≥n)
  // wifiManager.setFallbackPolicy(AyresWiFiManager::FallbackPolicy::NO_CREDENTIALS_ONLY);

  // B) Abrir portal SOLO con bot√≥n 2‚Äì5s (nunca autom√°tico)  ‚Üê lo que pediste
  //wifiManager.setFallbackPolicy(AyresWiFiManager::FallbackPolicy::BUTTON_ONLY);
  wifiManager.enableButtonPortal(true);

  // C) Abrir portal si falla la conexi√≥n
  // wifiManager.setFallbackPolicy(AyresWiFiManager::FallbackPolicy::ON_FAIL);

  // D) Abrir portal tras N fallos en T ms
  // wifiManager.setFallbackPolicy(AyresWiFiManager::FallbackPolicy::SMART_RETRIES);
  // wifiManager.setSmartRetries(3, 60000);

  // === Inicializa FS/GPIO/WiFi y carga credenciales ===
  wifiManager.begin();

  // Intenta conectar (si conecta hace NTP). Si no, aplicar√° la pol√≠tica anterior.
  wifiManager.run();

  // Autoreconexi√≥n del driver + l√≥gica propia de la lib
  wifiManager.setAutoReconnect(true);

  // Log de hora (si NTP ya se sincroniz√≥ dentro de la lib)
  const uint64_t ts = wifiManager.getTimestamp();
  if (ts > 0) {
    Serial.printf("‚è±Ô∏è Timestamp (ms): %llu\n", (unsigned long long)ts);
  } else {
    Serial.println("‚è±Ô∏è NTP no sincronizado a√∫n.");
  }

  Serial.println("üí° Bot√≥n: 2-5s abre portal, ‚â•5s borra credenciales.");
}

void loop() {
  // (si us√°s tu consola interactiva)
  shell.handleInput();

  // Atiende HTTP + DNS del portal (si est√° activo) y maneja timeout
  wifiManager.update();

  // Estado real del enlace
  const bool wifiOk = wifiManager.isConnected();

  if (!wifiOk) {
    // Backoff interno (cada 10 s) + NTP al reconectar
    wifiManager.reintentarConexionSiNecesario();

    // Solo escanea cuando NO hay enlace (tiene anti-spam interno)
    if (wifiManager.scanRedDetectada()) {
      Serial.println("üì∂ Red preferida detectada. Intentando reconectar‚Ä¶");
      wifiManager.forzarReconexion();
    }

  } else {
    // Conectado: chequeo de internet y RSSI cada NET_CHECK_MS
    const uint32_t now = millis();
    if (now - lastNetCheck > NET_CHECK_MS) {
      lastNetCheck = now;
      const bool net  = wifiManager.hayInternet();
      const int  rssi = wifiManager.getSignalStrength();
      Serial.printf("üåç Internet: %s | RSSI: %d dBm\n", net ? "OK" : "NO", rssi);
    }
  }

  delay(10); // respirito
}
